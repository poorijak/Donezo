// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  pending
  inProgress
  done
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Todo          Todo[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Todo {
  id        String    @id @unique @default(uuid())
  title     String
  note      String?
  start     DateTime?
  end       DateTime?
  status    status    @default(pending)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  TodoTag   TodoTag[]
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String    @id @default(uuid())
  icon      String
  title     String
  slug      String    @unique
  color     String
  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  TodoTag   TodoTag[]
}

model TodoTag {
  id     String @id @default(uuid())
  todoId String
  tagId  String
  todo   Todo   @relation(fields: [todoId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
}
